from fastapi import APIRouter, HTTPException, Depends, status
from typing import List
from app.schemas.user import UserCreate, UserRead, UserUpdate
from app.services.user_service import UserService

router = APIRouter(prefix="/users", tags=["Users"])
service = UserService()  # можно менять на Depends(UserService) при желании

@router.post(
    "/", 
    response_model=UserRead, 
    status_code=status.HTTP_201_CREATED
)
async def create_user(data: UserCreate):
    return await service.create_user(data)

@router.get(
    "/{user_id}", 
    response_model=UserRead
)
async def read_user(user_id: str):
    user = await service.get_user(user_id)
    if not user:
        raise HTTPException(status.HTTP_404_NOT_FOUND, "User not found")
    return user

@router.get(
    "/", 
    response_model=List[UserRead]
)
async def list_users(
    skip: int = 0, 
    limit: int = 10
):
    return await service.list_users(skip, limit)

@router.put(
    "/{user_id}", 
    response_model=UserRead
)
async def update_user(
    user_id: str, 
    data: UserUpdate
):
    try:
        return await service.update_user(user_id, data)
    except ValueError:
        raise HTTPException(status.HTTP_404_NOT_FOUND, "User not found")

@router.delete(
    "/{user_id}", 
    status_code=status.HTTP_204_NO_CONTENT
)
async def delete_user(user_id: str):
    try:
        await service.delete_user(user_id)
    except ValueError:
        raise HTTPException(status.HTTP_404_NOT_FOUND, "User not found")
