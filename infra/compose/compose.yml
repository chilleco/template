networks:
  app-net: {}

services:
  api:
    image: ${REGISTRY:-local}/${PROJECT_SLUG:-app}/api:${TAG:-local}
    env_file: ../../.env
    networks: [ app-net ]
    expose: [ "8000" ]
    deploy:
      restart_policy: { condition: on-failure }

  worker:
    image: ${REGISTRY:-local}/${PROJECT_SLUG:-app}/api:${TAG:-local}
    command: [ "celery", "-A", "app.tasks.celery_app", "worker", "-Q", "high,default,low", "--concurrency=4", "--loglevel=INFO", "-O", "fair" ]
    env_file: ../../.env
    networks: [ app-net ]
    deploy:
      restart_policy: { condition: on-failure }
      replicas: 2

  scheduler:
    image: ${REGISTRY:-local}/${PROJECT_SLUG:-app}/api:${TAG:-local}
    command: [ "celery", "-A", "app.tasks.celery_app", "beat", "--scheduler", "redbeat.RedBeatScheduler" ]
    env_file: ../../.env
    networks: [ app-net ]
    deploy:
      restart_policy: { condition: on-failure }

  # daemon:
  #   image: ${REGISTRY:-local}/${PROJECT_SLUG:-app}/api:${TAG:-local}
  #   command: [ "python", "-m", "app.services.realtime_poller" ]
  #   env_file: ../../.env
  #   networks: [ app-net ]
  #   deploy:
  #     restart_policy: { condition: on-failure }
  #     replicas: 1

  frontend:
    image: ${REGISTRY:-local}/${PROJECT_SLUG:-app}/web:${TAG:-local}
    environment:
      ENV: ${ENV}
      NEXT_PUBLIC_API_URL: ${API_URL}
      SENTRY_DSN: ${SENTRY_DSN_FRONT:-}
    networks: [ app-net ]
    expose: [ "3000" ]
    deploy:
      restart_policy: { condition: on-failure }
