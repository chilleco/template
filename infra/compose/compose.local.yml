volumes:
  mongo_data: {}
  pgdata: {}
  redis_data: {}
  app_data: {}
  logs_data: {}
  node_modules_cache: {}

services:
  api:
    build:
      context: ../backend
    command: [ "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload" ]
    env_file: ../../.env
    volumes:
      - ../backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - postgres
      - redis

  worker:
    build:
      context: ../backend
    command: [ "celery", "-A", "app.tasks.celery_app", "worker", "--concurrency=2", "--loglevel=INFO" ]
    env_file: ../../.env
    volumes:
      - ../backend:/app
    depends_on:
      - mongo
      - postgres
      - redis

  frontend:
    build:
      context: ../frontend
    command: [ "npm", "run", "dev" ]
    environment:
      ENV: local
      NEXT_PUBLIC_API_URL: ${API_URL}
      SENTRY_DSN:
    volumes:
      - ../frontend:/app
    ports:
      - "3000:3000"
    depends_on:
      - api

  mongo:
    image: mongo:8.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - mongo_data:/data/db
    networks: [ app-net ]
    ports:
      - "27017:27017"

  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [ app-net ]
    ports:
      - "5432:5432"
    # healthcheck:
    #   test: [ "CMD-SHELL", "pg_isready -U user -d app" ]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 10

  redis:
    image: redis:8.2-alpine
    command: [ "redis-server", "--appendonly", "no" ]
    volumes:
      - redis_data:/data
    networks: [ app-net ]
    ports:
      - "6379:6379"
    # healthcheck:
    #   test: [ "CMD", "redis-cli", "-a", "redispass", "ping" ]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 10
